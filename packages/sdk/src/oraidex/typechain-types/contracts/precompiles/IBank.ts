/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balance"
      | "burn"
      | "decimals"
      | "name"
      | "send"
      | "supply"
      | "symbol"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balance",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values: [string]): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "supply", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values: [string]): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
}

export interface IBank extends BaseContract {
  connect(runner?: ContractRunner | null): IBank;
  waitForDeployment(): Promise<this>;

  interface: IBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balance: TypedContractMethod<
    [acc: AddressLike, denom: string],
    [bigint],
    "view"
  >;

  burn: TypedContractMethod<
    [account: AddressLike, denom: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[denom: string], [bigint], "view">;

  name: TypedContractMethod<[denom: string], [string], "view">;

  send: TypedContractMethod<
    [toAddress: AddressLike, denom: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  supply: TypedContractMethod<[denom: string], [bigint], "view">;

  symbol: TypedContractMethod<[denom: string], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[acc: AddressLike, denom: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [account: AddressLike, denom: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[denom: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[denom: string], [string], "view">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [toAddress: AddressLike, denom: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<[denom: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[denom: string], [string], "view">;

  filters: {};
}
