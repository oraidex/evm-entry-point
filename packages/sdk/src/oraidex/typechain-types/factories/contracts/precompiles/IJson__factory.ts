/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IJson,
  IJsonInterface,
} from "../../../contracts/precompiles/IJson";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "key",
        type: "string",
      },
    ],
    name: "extractAsBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "key",
        type: "string",
      },
    ],
    name: "extractAsBytesList",
    outputs: [
      {
        internalType: "bytes[]",
        name: "response",
        type: "bytes[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "key",
        type: "string",
      },
    ],
    name: "extractAsUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "response",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IJson__factory {
  static readonly abi = _abi;
  static createInterface(): IJsonInterface {
    return new Interface(_abi) as IJsonInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IJson {
    return new Contract(address, _abi, runner) as unknown as IJson;
  }
}
