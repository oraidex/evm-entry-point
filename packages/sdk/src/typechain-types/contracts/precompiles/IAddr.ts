/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IAddrInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "associate"
      | "associatePubKey"
      | "getCosmosAddr"
      | "getEvmAddr"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "associate",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "associatePubKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCosmosAddr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getEvmAddr", values: [string]): string;

  decodeFunctionResult(functionFragment: "associate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "associatePubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCosmosAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEvmAddr", data: BytesLike): Result;
}

export interface IAddr extends BaseContract {
  connect(runner?: ContractRunner | null): IAddr;
  waitForDeployment(): Promise<this>;

  interface: IAddrInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  associate: TypedContractMethod<
    [v: string, r: string, s: string, customMessage: string],
    [[string, string] & { cosmosAddr: string; evmAddr: string }],
    "nonpayable"
  >;

  associatePubKey: TypedContractMethod<
    [pubKeyHex: string],
    [[string, string] & { cosmosAddr: string; evmAddr: string }],
    "nonpayable"
  >;

  getCosmosAddr: TypedContractMethod<[addr: AddressLike], [string], "view">;

  getEvmAddr: TypedContractMethod<[addr: string], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "associate"
  ): TypedContractMethod<
    [v: string, r: string, s: string, customMessage: string],
    [[string, string] & { cosmosAddr: string; evmAddr: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "associatePubKey"
  ): TypedContractMethod<
    [pubKeyHex: string],
    [[string, string] & { cosmosAddr: string; evmAddr: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCosmosAddr"
  ): TypedContractMethod<[addr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEvmAddr"
  ): TypedContractMethod<[addr: string], [string], "view">;

  filters: {};
}
